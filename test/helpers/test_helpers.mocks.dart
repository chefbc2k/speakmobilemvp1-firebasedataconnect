// Mocks generated by Mockito 5.4.4 from annotations
// in speakmobilemvp/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:speakmobilemvp/core/services/backend/cognitive_service.dart' as _i4;

import 'test_helpers.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RecordingServiceBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecordingService extends _i1.Mock
    implements _i2.RecordingServiceBase {
  MockRecordingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isRecording => (super.noSuchMethod(
        Invocation.getter(#isRecording),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<String?> stopRecording({
    required String? category,
    required String? language,
    String? description,
    Map<String, dynamic>? culturalMetadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopRecording,
          [],
          {
            #category: category,
            #language: language,
            #description: description,
            #culturalMetadata: culturalMetadata,
          },
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<bool> requestMicrophonePermission() => (super.noSuchMethod(
        Invocation.method(
          #requestMicrophonePermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> hasMicrophonePermission() => (super.noSuchMethod(
        Invocation.method(
          #hasMicrophonePermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<String?> startRecording() => (super.noSuchMethod(
        Invocation.method(
          #startRecording,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> pauseRecording() => (super.noSuchMethod(
        Invocation.method(
          #pauseRecording,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> resumeRecording() => (super.noSuchMethod(
        Invocation.method(
          #resumeRecording,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<double> getAmplitude() => (super.noSuchMethod(
        Invocation.method(
          #getAmplitude,
          [],
        ),
        returnValue: _i3.Future<double>.value(0.0),
      ) as _i3.Future<double>);

  @override
  _i3.Future<bool> requestAllPermissions() => (super.noSuchMethod(
        Invocation.method(
          #requestAllPermissions,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [SupabaseServiceBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseService extends _i1.Mock implements _i2.SupabaseServiceBase {
  MockSupabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String?> uploadVoiceClip(
    String? filePath, {
    required String? category,
    required String? language,
    String? description,
    Map<String, dynamic>? culturalMetadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadVoiceClip,
          [filePath],
          {
            #category: category,
            #language: language,
            #description: description,
            #culturalMetadata: culturalMetadata,
          },
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getUserVoicePreservations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserVoicePreservations,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> updateVoicePreservation({
    required String? preservationId,
    String? category,
    String? language,
    String? description,
    Map<String, dynamic>? culturalMetadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVoicePreservation,
          [],
          {
            #preservationId: preservationId,
            #category: category,
            #language: language,
            #description: description,
            #culturalMetadata: culturalMetadata,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [CognitiveService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCognitiveService extends _i1.Mock implements _i4.CognitiveService {
  MockCognitiveService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> analyzeTone({
    required String? audioPath,
    required String? transcription,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeTone,
          [],
          {
            #audioPath: audioPath,
            #transcription: transcription,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<String> performTranscription(String? audioPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #performTranscription,
          [audioPath],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #performTranscription,
            [audioPath],
          ),
        )),
      ) as _i3.Future<String>);
}

/// A class which mocks [AudioProcessorBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioProcessor extends _i1.Mock implements _i2.AudioProcessorBase {
  MockAudioProcessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> processAudio(String? inputFilePath) => (super.noSuchMethod(
        Invocation.method(
          #processAudio,
          [inputFilePath],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #processAudio,
            [inputFilePath],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> adjustAudioSettings({
    required String? filePath,
    required double? noiseReduction,
    required double? gain,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #adjustAudioSettings,
          [],
          {
            #filePath: filePath,
            #noiseReduction: noiseReduction,
            #gain: gain,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> analyzeTone({
    required String? audioPath,
    required String? transcription,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeTone,
          [],
          {
            #audioPath: audioPath,
            #transcription: transcription,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> compressAudio({
    required String? filePath,
    required int? targetBitrate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #compressAudio,
          [],
          {
            #filePath: filePath,
            #targetBitrate: targetBitrate,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
